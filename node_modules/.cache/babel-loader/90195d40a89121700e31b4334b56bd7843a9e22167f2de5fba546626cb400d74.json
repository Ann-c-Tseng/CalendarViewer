{"ast":null,"code":"const theDate = new Date();\nexport function getYear() {\n  var year = theDate.getFullYear();\n  return year;\n}\nexport function getMonth() {\n  var monthNum = getMonthNum();\n  if (monthNum === 1) {\n    return \"January\";\n  } else if (monthNum === 2) {\n    return \"February\";\n  } else if (monthNum === 3) {\n    return \"March\";\n  } else if (monthNum === 4) {\n    return \"April\";\n  } else if (monthNum === 5) {\n    return \"May\";\n  } else if (monthNum === 6) {\n    return \"June\";\n  } else if (monthNum === 7) {\n    return \"July\";\n  } else if (monthNum === 8) {\n    return \"August\";\n  } else if (monthNum === 9) {\n    return \"September\";\n  } else if (monthNum === 10) {\n    return \"October\";\n  } else if (monthNum === 11) {\n    return \"November\";\n  } else {\n    return \"December\";\n  }\n}\nfunction isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nfunction getMonthNum() {\n  var month = theDate.getMonth();\n  return month + 1; //Prevent 0 being Jan and so on\n}\n\nexport function getDay() {\n  var day = theDate.getDate();\n  var weekDay = theDate.toString().slice(0, 3);\n  return [day, weekDay];\n}\nfunction findPairs(month, weekDayInt, year) {\n  var pairArray = [];\n  var pairIndex = 0;\n  var currentWeekDay = weekDayInt;\n  // console.log(\"weekDayInt: \" + weekDayInt);\n  var monthLength = 0;\n  if (month === 2 && isLeapYear(year)) {\n    //If February and leap year, has 29 days\n    monthLength = 29;\n  } else if (month === 2) {\n    //Else February has 28 days\n    monthLength = 28;\n  } else {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      //Months with 31 days: January, March, May, July, August, October, and December\n      monthLength = 31;\n    } else {\n      //Months with 30 days: April, June, September, and November\n      monthLength = 30;\n    }\n  }\n  // console.log(monthLength);\n  for (var i = 1; i <= monthLength; i++) {\n    if (currentWeekDay > 7) {\n      currentWeekDay = 1;\n    }\n    var pair = [i, currentWeekDay];\n    pairArray[pairIndex] = pair;\n    pairIndex++;\n    currentWeekDay++;\n  }\n  return pairArray;\n}\nfunction getDaysArray(monthNum, yearNum) {\n  //Zeller's Rule:\n  //Zeller's rule explanation and source: https://www.themathdoctors.org/zellers-rule-what-day-of-the-week-is-it/\n  //Given the month, day, and year,\n  //we can use Zeller's rule to find the weekday for any given day of any month and year (leap year inclusive).\n  //We can find the weekday of the 1st day of a month, and understand how the other following days are to be layed-out in this calendar.\n  //Zeller's rule formula: N = (d + 2m + [3(m+1)/5] + y + [y/4] - [y/100] + [y/400] + 2)\n  //When we divide N by 7, and get the remainder, we can map it to the below code assigned to a particular weekday.\n  //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n  // d = day, m = month, y = year\n  //The above formula's [] brackets represent flooring.\n  //NOTE: For months January and February, we need to use the numbers \"13\" and \"14\" correspondingly AND the previous year\n  //to complete the calculations correctly. E.g. If finding weekday of 1/1/98, then use 13/1/97 for the calculation.\n  var year = yearNum;\n  var month = monthNum;\n  var day = 1;\n  if (month === 1) {\n    year = year - 1;\n    month = 13;\n  } else if (month === 2) {\n    year = year - 1;\n    month = 14;\n  }\n  // console.log(month + \" \" + year);\n\n  var n1 = 2 * month;\n  var n2 = Math.floor(3 * (month + 1) / 5);\n  var n3 = Math.floor(year / 4);\n  var n4 = Math.floor(year / 100);\n  var n5 = Math.floor(year / 400);\n  var n = day + n1 + n2 + year + n3 - n4 + n5 + 2;\n  var remainder = n % 7;\n  var weekDay = 0;\n\n  //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n  if (remainder === 1) {\n    //Sunday\n    weekDay = 7;\n  } else if (remainder === 2) {\n    //Monday\n    weekDay = 1;\n  } else if (remainder === 3) {\n    //Tuesday\n    weekDay = 2;\n  } else if (remainder === 4) {\n    //Wednesday\n    weekDay = 3;\n  } else if (remainder === 5) {\n    //Thursday\n    weekDay = 4;\n  } else if (remainder === 6) {\n    //Friday\n    weekDay = 5;\n  } else {\n    //remainder === 0) //Saturday\n    weekDay = 6;\n  }\n\n  //NOTE: we are using monthNum and yearNum here because it should be 1 = Jan and 2 = Feb\n  //while \"month\" and \"year\" variable above can equal 13, 14, and year-1 which is only used for calculation.\n  var dayPairs = findPairs(monthNum, weekDay, yearNum);\n  return dayPairs;\n}\nexport function dayDisplay(day) {\n  var arr = getDaysArray();\n  var dayArr = [];\n  arr.map(obj => {\n    if (obj[1] === day) {\n      console.log(obj[1]);\n      dayArr.concat(obj[0]);\n    }\n    return null;\n  });\n  // console.log(dayArr);\n  // return <>\n  //     <h5>{day}</h5><h5>{day}</h5><h5>{day}</h5>\n  // </>;\n}","map":{"version":3,"names":["theDate","Date","getYear","year","getFullYear","getMonth","monthNum","getMonthNum","isLeapYear","month","getDay","day","getDate","weekDay","toString","slice","findPairs","weekDayInt","pairArray","pairIndex","currentWeekDay","monthLength","i","pair","getDaysArray","yearNum","n1","n2","Math","floor","n3","n4","n5","n","remainder","dayPairs","dayDisplay","arr","dayArr","map","obj","console","log","concat"],"sources":["/Users/anntseng/Desktop/CalendarViewer/reactcalendar/src/Components/Calendar/DateFunctions.js"],"sourcesContent":["const theDate = new Date();\n\nexport function getYear() {\n    var year = theDate.getFullYear();\n    return year;\n}\n\nexport function getMonth() {\n    var monthNum = getMonthNum();\n    if(monthNum === 1) {\n        return \"January\";\n    } else if(monthNum === 2) {\n        return \"February\";\n    } else if(monthNum === 3) {\n        return \"March\";\n    } else if(monthNum === 4) {\n        return \"April\";\n    } else if(monthNum === 5) {\n        return \"May\";\n    } else if(monthNum === 6) {\n        return \"June\";\n    } else if(monthNum === 7) {\n        return \"July\";\n    } else if(monthNum === 8) {\n        return \"August\";\n    } else if(monthNum === 9) {\n        return \"September\";\n    } else if(monthNum === 10) {\n        return \"October\";\n    } else if(monthNum === 11) {\n        return \"November\";\n    }else {\n        return \"December\";\n    }\n}\n\nfunction isLeapYear(year) {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nfunction getMonthNum() {\n    var month = theDate.getMonth();\n    return month+1; //Prevent 0 being Jan and so on\n}\n\nexport function getDay() {\n    var day = theDate.getDate();\n    var weekDay = theDate.toString().slice(0,3);\n    return [day, weekDay];\n}\n\nfunction findPairs(month, weekDayInt, year) {\n    var pairArray = [];\n    var pairIndex = 0;\n    var currentWeekDay = weekDayInt;\n    // console.log(\"weekDayInt: \" + weekDayInt);\n    var monthLength = 0;\n\n    if(month === 2 && isLeapYear(year)) { //If February and leap year, has 29 days\n        monthLength = 29;\n    } else if(month === 2) { //Else February has 28 days\n        monthLength = 28;\n    } else {\n        if(month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n            //Months with 31 days: January, March, May, July, August, October, and December\n            monthLength = 31;\n        } else {\n            //Months with 30 days: April, June, September, and November\n            monthLength = 30;\n        }\n    }\n    // console.log(monthLength);\n    for(var i = 1; i <= monthLength; i++) {\n        if(currentWeekDay > 7) {\n            currentWeekDay = 1;\n        }\n        var pair = [i, currentWeekDay];\n        pairArray[pairIndex] = pair;\n        pairIndex++;\n        currentWeekDay++;\n    }\n    return pairArray;\n}\n\nfunction getDaysArray(monthNum, yearNum) {\n    //Zeller's Rule:\n        //Zeller's rule explanation and source: https://www.themathdoctors.org/zellers-rule-what-day-of-the-week-is-it/\n        //Given the month, day, and year,\n        //we can use Zeller's rule to find the weekday for any given day of any month and year (leap year inclusive).\n        //We can find the weekday of the 1st day of a month, and understand how the other following days are to be layed-out in this calendar.\n        //Zeller's rule formula: N = (d + 2m + [3(m+1)/5] + y + [y/4] - [y/100] + [y/400] + 2)\n        //When we divide N by 7, and get the remainder, we can map it to the below code assigned to a particular weekday.\n            //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n            // d = day, m = month, y = year\n            //The above formula's [] brackets represent flooring.\n        //NOTE: For months January and February, we need to use the numbers \"13\" and \"14\" correspondingly AND the previous year\n        //to complete the calculations correctly. E.g. If finding weekday of 1/1/98, then use 13/1/97 for the calculation.\n    var year = yearNum;\n    var month = monthNum;\n    var day = 1;\n\n    if(month === 1) {\n        year = year - 1;\n        month = 13;\n    } else if(month === 2) {\n        year = year - 1;\n        month = 14;\n    }\n    // console.log(month + \" \" + year);\n\n    var n1 = 2*month;\n    var n2 = Math.floor((3*(month+1))/5);\n    var n3 = Math.floor(year/4);\n    var n4 = Math.floor(year/100);\n    var n5 = Math.floor(year/400);\n\n    var n = day + n1 + n2 + year + n3 - n4 + n5 + 2;\n    var remainder = n % 7;\n    var weekDay = 0;\n\n    //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n    if(remainder === 1) { //Sunday\n        weekDay = 7;\n    } else if(remainder === 2) { //Monday\n        weekDay = 1;\n    } else if(remainder === 3) { //Tuesday\n        weekDay = 2;\n    } else if(remainder === 4) { //Wednesday\n        weekDay = 3;\n    } else if(remainder === 5) { //Thursday\n        weekDay = 4;\n    } else if(remainder === 6) { //Friday\n        weekDay = 5;\n    } else { //remainder === 0) //Saturday\n        weekDay = 6;\n    }\n\n    //NOTE: we are using monthNum and yearNum here because it should be 1 = Jan and 2 = Feb\n    //while \"month\" and \"year\" variable above can equal 13, 14, and year-1 which is only used for calculation.\n    var dayPairs = findPairs(monthNum, weekDay, yearNum);\n    return dayPairs;\n}\n\nexport function dayDisplay(day) {\n    var arr = getDaysArray();\n    var dayArr = [];\n\n    arr.map((obj) => {\n        if(obj[1] === day) {\n            console.log(obj[1])\n            dayArr.concat(obj[0]);\n        }\n        return null;\n    });\n    // console.log(dayArr);\n    // return <>\n    //     <h5>{day}</h5><h5>{day}</h5><h5>{day}</h5>\n    // </>;\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}