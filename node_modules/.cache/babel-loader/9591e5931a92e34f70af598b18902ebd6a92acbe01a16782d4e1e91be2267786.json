{"ast":null,"code":"const theDate = new Date();\nexport function getYear() {\n  var year = theDate.getFullYear();\n  return year;\n}\nfunction isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nfunction getMonthNum() {\n  var month = theDate.getMonth();\n  return month + 1; //Prevent 0 being Jan and so on\n}\n\nexport function getDay() {\n  var day = theDate.getDate();\n  var weekDay = theDate.toString().slice(0, 3);\n  return [day, weekDay];\n}\nexport function getMonth() {\n  var monthNum = getMonthNum();\n  if (monthNum === 1) {\n    return \"January\";\n  } else if (monthNum === 2) {\n    return \"February\";\n  } else if (monthNum === 3) {\n    return \"March\";\n  } else if (monthNum === 4) {\n    return \"April\";\n  } else if (monthNum === 5) {\n    return \"May\";\n  } else if (monthNum === 6) {\n    return \"June\";\n  } else if (monthNum === 7) {\n    return \"July\";\n  } else if (monthNum === 8) {\n    return \"August\";\n  } else if (monthNum === 9) {\n    return \"September\";\n  } else if (monthNum === 10) {\n    return \"October\";\n  } else if (monthNum === 11) {\n    return \"November\";\n  } else {\n    return \"December\";\n  }\n}\nfunction getPairs(month, weekDayInt) {\n  var numsArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n  var pairArray = [];\n  if (monthNum === 2 && isLeapYear()) {\n    //If February and leap year, has 29 days\n    numsArr = numsArr.slice(0, 29);\n  } else if (monthNum === 2) {\n    //Else February has 28 days\n    numsArr = numsArr.slice(0, 28);\n  } else {\n    if (monthNum === 1 || monthNum === 3 || monthNum === 5 || monthNum === 7 || monthNum === 8 || monthNum === 10 || monthNum === 12) {\n      //Months with 31 days: January, March, May, July, August, October, and December\n      numsArr = numsArr.slice(0, 31);\n    } else {\n      //Months with 30 days: April, June, September, and November\n      numsArr = numsArr.slice(0, 30);\n    }\n  }\n  return pairArray;\n}\nexport function getDaysArray(monthNum, monthYear) {\n  //Zeller's Rule:\n  //Zeller's rule explanation and source: https://www.themathdoctors.org/zellers-rule-what-day-of-the-week-is-it/\n  //Given the month, day, and year,\n  //we can use Zeller's rule to find the weekday for any given day of any month and year (leap year inclusive).\n  //We can find the weekday of the 1st day of a month, and understand how the other following days are to be layed-out in this calendar.\n  //Zeller's rule formula: N = (d + 2m + [3(m+1)/5] + y + [y/4] - [y/100] + [y/400] + 2)\n  //When we divide N by 7, and get the remainder, we can map it to the below code assigned to a particular weekday.\n  //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n  // d = day, m = month, y = year\n  //The above formula's [] brackets represent flooring.\n  //NOTE: For months January and February, we need to use the numbers \"13\" and \"14\" correspondingly AND the previous year\n  //to complete the calculations correctly. E.g. If finding weekday of 1/1/98, then use 13/1/97 for the calculation.\n  var year = monthYear;\n  var month = monthNum;\n  var day = 1;\n  if (month === 1) {\n    year = year - 1;\n    month = 13;\n  } else if (month === 2) {\n    year = year - 1;\n    month = 14;\n  }\n  // console.log(month + \" \" + year);\n\n  var n1 = 2 * month;\n  var n2 = Math.floor(3 * (month + 1) / 5);\n  var n3 = Math.floor(year / 4);\n  var n4 = Math.floor(year / 100);\n  var n5 = Math.floor(year / 400);\n  var n = day + n1 + n2 + year + n3 - n4 + n5 + 2;\n  var remainder = n % 7;\n  var weekDay = 0;\n\n  //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n  if (remainder === 1) {\n    weekDay = 7;\n    pairArray = getPairs(month, weekDay);\n  } else if (remainder === 2) {\n    weekDay = 1;\n    pairArray = getPairs(month, weekDay);\n  } else if (remainder === 3) {\n    weekDay = 2;\n    pairArray = getPairs(month, weekDay);\n  } else if (remainder === 4) {\n    weekDay = 3;\n    pairArray = getPairs(month, weekDay);\n  } else if (remainder === 5) {\n    weekDay = 4;\n    pairArray = getPairs(month, weekDay);\n  } else if (remainder === 6) {\n    weekDay = 5;\n    pairArray = getPairs(month, weekDay);\n  } else {\n    //remainder === 0) \n    weekDay = 6;\n    pairArray = getPairs(month, weekDay);\n  }\n  console.log(weekDay);\n  return n;\n}","map":{"version":3,"names":["theDate","Date","getYear","year","getFullYear","isLeapYear","getMonthNum","month","getMonth","getDay","day","getDate","weekDay","toString","slice","monthNum","getPairs","weekDayInt","numsArr","pairArray","getDaysArray","monthYear","n1","n2","Math","floor","n3","n4","n5","n","remainder","console","log"],"sources":["/Users/anntseng/Desktop/CalendarViewer/reactcalendar/src/Components/Calendar/DateFunctions.js"],"sourcesContent":["const theDate = new Date();\n\nexport function getYear() {\n    var year = theDate.getFullYear();\n    return year;\n}\n\nfunction isLeapYear(year) {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nfunction getMonthNum() {\n    var month = theDate.getMonth();\n    return month+1; //Prevent 0 being Jan and so on\n}\n\nexport function getDay() {\n    var day = theDate.getDate();\n    var weekDay = theDate.toString().slice(0,3);\n    return [day, weekDay];\n}\n\nexport function getMonth() {\n    var monthNum = getMonthNum();\n    if(monthNum === 1) {\n        return \"January\";\n    } else if(monthNum === 2) {\n        return \"February\";\n    } else if(monthNum === 3) {\n        return \"March\";\n    } else if(monthNum === 4) {\n        return \"April\";\n    } else if(monthNum === 5) {\n        return \"May\";\n    } else if(monthNum === 6) {\n        return \"June\";\n    } else if(monthNum === 7) {\n        return \"July\";\n    } else if(monthNum === 8) {\n        return \"August\";\n    } else if(monthNum === 9) {\n        return \"September\";\n    } else if(monthNum === 10) {\n        return \"October\";\n    } else if(monthNum === 11) {\n        return \"November\";\n    }else {\n        return \"December\";\n    }\n}\n\nfunction getPairs(month, weekDayInt) {\n    var numsArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, \n        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    var pairArray = [];\n\n    if(monthNum === 2 && isLeapYear()) { //If February and leap year, has 29 days\n        numsArr = numsArr.slice(0,29);\n    } else if(monthNum === 2) { //Else February has 28 days\n        numsArr = numsArr.slice(0,28);\n    } else {\n        if(monthNum === 1 || monthNum === 3 || monthNum === 5 || monthNum === 7 || monthNum === 8 || monthNum === 10 || monthNum === 12) {\n            //Months with 31 days: January, March, May, July, August, October, and December\n            numsArr = numsArr.slice(0,31);\n        } else {\n            //Months with 30 days: April, June, September, and November\n            numsArr = numsArr.slice(0,30);\n        }\n    }\n\n\n\n    return pairArray;\n}\n\nexport function getDaysArray(monthNum, monthYear) {\n    //Zeller's Rule:\n        //Zeller's rule explanation and source: https://www.themathdoctors.org/zellers-rule-what-day-of-the-week-is-it/\n        //Given the month, day, and year,\n        //we can use Zeller's rule to find the weekday for any given day of any month and year (leap year inclusive).\n        //We can find the weekday of the 1st day of a month, and understand how the other following days are to be layed-out in this calendar.\n        //Zeller's rule formula: N = (d + 2m + [3(m+1)/5] + y + [y/4] - [y/100] + [y/400] + 2)\n        //When we divide N by 7, and get the remainder, we can map it to the below code assigned to a particular weekday.\n            //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n            // d = day, m = month, y = year\n            //The above formula's [] brackets represent flooring.\n        //NOTE: For months January and February, we need to use the numbers \"13\" and \"14\" correspondingly AND the previous year\n        //to complete the calculations correctly. E.g. If finding weekday of 1/1/98, then use 13/1/97 for the calculation.\n    var year = monthYear;\n    var month = monthNum;\n    var day = 1;\n\n    if(month === 1) {\n        year = year - 1;\n        month = 13;\n    } else if(month === 2) {\n        year = year - 1;\n        month = 14;\n    }\n    // console.log(month + \" \" + year);\n\n    var n1 = 2*month;\n    var n2 = Math.floor((3*(month+1))/5);\n    var n3 = Math.floor(year/4);\n    var n4 = Math.floor(year/100);\n    var n5 = Math.floor(year/400);\n\n    var n = day + n1 + n2 + year + n3 - n4 + n5 + 2;\n    var remainder = n % 7;\n    var weekDay = 0;\n\n    //1 = Sun, 2 = Mon, 3 = Tue, 4 = Wed, 5 = Thu, 6 = Fri, and 0 = Sat\n    if(remainder === 1) {\n        weekDay = 7;\n        pairArray = getPairs(month, weekDay);\n    } else if(remainder === 2) {\n        weekDay = 1;\n        pairArray = getPairs(month, weekDay);\n    } else if(remainder === 3) {\n        weekDay = 2;\n        pairArray = getPairs(month, weekDay);\n    } else if(remainder === 4) {\n        weekDay = 3;\n        pairArray = getPairs(month, weekDay);\n    } else if(remainder === 5) {\n        weekDay = 4;\n        pairArray = getPairs(month, weekDay);\n    } else if(remainder === 6) {\n        weekDay = 5;\n        pairArray = getPairs(month, weekDay);\n    } else { //remainder === 0) \n        weekDay = 6;\n        pairArray = getPairs(month, weekDay);\n    }\n\n    console.log(weekDay);\n    return n;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}